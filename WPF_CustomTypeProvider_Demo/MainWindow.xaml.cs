/***********************************************************************
Copyright 2018 CodeX Enterprises LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Major Changes:
04/2018    1.0     Initial release (Joel Champagne)
***********************************************************************/
using CodexMicroORM.Core.Services;
using System;
using System.Windows;
using System.Windows.Controls;
using CodexMicroORM.BindingSupport;
using System.Reflection;
using System.ComponentModel;

namespace WPF_CustomTypeProvider_Demo
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        public MainWindow()
        {
            InitializeComponent();

            // Get data for grid 1
            Data1.ItemsSource = Inherit.JsonReader.LoadData<Inherit.Person>();

            // Setup specific to CodexMicroORM - defining a primary (surrogate) key
            KeyService.RegisterKey<NoInherit.Person>(nameof(NoInherit.Person.ID));

            // Get data for grid 2 (CodexMicroORM)
            Data2.ItemsSource = NoInherit.JsonReader.LoadData<NoInherit.Person>().AsDynamicBindable();
        }

        private void Data1_AutoGeneratedColumns(object sender, EventArgs e)
        {
            ApplyGridFormats(Data1);
        }

        private void Data2_AutoGeneratedColumns(object sender, EventArgs e)
        {
            ApplyGridFormats(Data2);
        }

        private void Data1_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            ApplyGridColumnChecks(e);
        }

        private void Data2_AutoGeneratingColumn(object sender, DataGridAutoGeneratingColumnEventArgs e)
        {
            ApplyGridColumnChecks(e);
        }

        private void ApplyGridFormats(DataGrid dg)
        {
            foreach (var c in dg.Columns)
            {
                if (c is DataGridTextColumn dgtc)
                {
                    // For simplicity we assume that all columns are nullable
                    dgtc.Binding.TargetNullValue = string.Empty;
                }
            }
        }

        private void ApplyGridColumnChecks(DataGridAutoGeneratingColumnEventArgs e)
        {
            if (e.PropertyDescriptor is PropertyInfo pi)
            {
                if (pi.GetGetMethod() != null)
                {
                    var ba = pi.GetCustomAttribute<BrowsableAttribute>();

                    if (ba != null)
                    {
                        e.Cancel = !ba.Browsable;
                    }
                }
            }
        }
    }
}
